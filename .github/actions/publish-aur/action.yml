name: 'Publish to AUR'
description: 'Publishes package to Arch User Repository'
inputs:
  aur_ssh_private_key:
    description: 'SSH private key for AUR publishing'
    required: true
  package_directory:
    description: 'Directory containing PKGBUILD'
    required: true
    default: 'sourcegraph-amp'
  force_publish:
    description: 'Force publish even if version unchanged'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Check if version changed
      id: version-check
      run: |
        #!/usr/bin/env bash
        set -euo pipefail

        # Get current version from PKGBUILD
        current_ver=$(awk -F'=' '/^_npmver=/ {print $2}' ${{ inputs.package_directory }}/PKGBUILD | tr -d ' ')

        # Get previous version from the last commit
        if git show HEAD~1:${{ inputs.package_directory }}/PKGBUILD >/dev/null 2>&1; then
          previous_ver=$(git show HEAD~1:${{ inputs.package_directory }}/PKGBUILD | awk -F'=' '/^_npmver=/ {print $2}' | tr -d ' ')
        else
          # First commit, treat as new version
          previous_ver=""
        fi

        echo "Current version: $current_ver"
        echo "Previous version: $previous_ver"

        if [ "$current_ver" != "$previous_ver" ] && [ -n "$current_ver" ]; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "new_version=$current_ver" >> $GITHUB_OUTPUT
          echo "✅ Version changed from $previous_ver to $current_ver"
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No version change detected"
        fi
      shell: bash

    - name: Install and setup aurpublish
      if: steps.version-check.outputs.version_changed == 'true' || inputs.force_publish == 'true'
      run: |
        # Install aurpublish
        wget -O aurpublish https://raw.githubusercontent.com/eli-schwartz/aurpublish/master/aurpublish.in
        sed -i 's|@HOOKSDIR@|/usr/share/aurpublish|g' aurpublish
        chmod +x aurpublish
        sudo mv aurpublish /usr/local/bin/

        # Setup SSH for AUR
        mkdir -p ~/.ssh
        echo "${{ inputs.aur_ssh_private_key }}" > ~/.ssh/aur
        chmod 600 ~/.ssh/aur
        ssh-keyscan -t rsa,ecdsa,ed25519 aur.archlinux.org >> ~/.ssh/known_hosts

        # Configure SSH for AUR
        cat >> ~/.ssh/config << EOF
        Host aur.archlinux.org
          IdentityFile ~/.ssh/aur
          User aur
        EOF
      shell: bash

    - name: Publish to AUR
      if: steps.version-check.outputs.version_changed == 'true' || inputs.force_publish == 'true'
      run: |
        aurpublish ${{ inputs.package_directory }}
        echo "✅ Successfully published to AUR using aurpublish"
      shell: bash

    - name: No deployment needed
      if: steps.version-check.outputs.version_changed == 'false' && inputs.force_publish != 'true'
      run: echo "ℹ️ No version change detected - skipping AUR deployment"
      shell: bash
