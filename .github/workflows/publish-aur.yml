name: Publish to AUR

on:
  push:
    branches: [master]
    paths: ['sourcegraph-amp/PKGBUILD']
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish even if version unchanged'
        type: boolean
        default: false

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Check if version changed
        id: version-check
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          # Get current version from PKGBUILD
          current_ver=$(awk -F'=' '/^_npmver=/ {print $2}' sourcegraph-amp/PKGBUILD | tr -d ' ')

          # Get previous version from the last commit
          if git show HEAD~1:sourcegraph-amp/PKGBUILD >/dev/null 2>&1; then
          previous_ver=$(git show HEAD~1:sourcegraph-amp/PKGBUILD | awk -F'=' '/^_npmver=/ {print $2}' | tr -d ' ')
          else
            # First commit, treat as new version
            previous_ver=""
          fi

          echo "Current version: $current_ver"
          echo "Previous version: $previous_ver"

          if [ "$current_ver" != "$previous_ver" ] && [ -n "$current_ver" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$current_ver" >> $GITHUB_OUTPUT
            echo "✅ Version changed from $previous_ver to $current_ver"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No version change detected"
          fi

      - name: Install and setup aurpublish
        if: steps.version-check.outputs.version_changed == 'true' || github.event.inputs.force_publish == 'true'
        run: |
          # Install aurpublish
          wget -O aurpublish https://raw.githubusercontent.com/eli-schwartz/aurpublish/master/aurpublish.in
          sed -i 's|@HOOKSDIR@|/usr/share/aurpublish|g' aurpublish
          chmod +x aurpublish
          sudo mv aurpublish /usr/local/bin/

          # Setup SSH for AUR
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          ssh-keyscan -t rsa,ecdsa,ed25519 aur.archlinux.org >> ~/.ssh/known_hosts

          # Configure SSH for AUR
          cat >> ~/.ssh/config << EOF
          Host aur.archlinux.org
            IdentityFile ~/.ssh/aur
            User aur
          EOF

      - name: Publish to AUR with aurpublish
        if: steps.version-check.outputs.version_changed == 'true' || github.event.inputs.force_publish == 'true'
        run: |
          aurpublish sourcegraph-amp
          echo "✅ Successfully published to AUR using aurpublish"

      - name: No deployment needed
        if: steps.version-check.outputs.version_changed == 'false' && github.event.inputs.force_publish != 'true'
        run: echo "ℹ️ No version change detected - skipping AUR deployment"
